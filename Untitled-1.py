#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import os
from datetime import datetime

import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# ========== === –ù–ê–°–¢–†–û–ô–ö–ò === ==========
API_TOKEN = "8431308016:AAEvKejj9VzGe7mesnv5bBhlzGmRhqs0dwY"

# ID –≥—Ä—É–ø–ø—ã (–∫—É–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –∑–∞—è–≤–∫–∏)
ADMIN_CHAT_ID = -1001234567890  # <-- –≤—Å—Ç–∞–≤—å ID —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã

# ID —Ç–≤–æ–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞
OWNER_ID = 556091656  # <-- —Ç–≤–æ–π –ª–∏—á–Ω—ã–π Telegram ID (@userinfobot –ø–æ–∫–∞–∂–µ—Ç)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
WELCOME_TEXT = """
üíÇ‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ –±–æ—Ç –Ω–∞–±–æ—Ä–∞ –Ω–∞ —Å–ª—É–∂–±—É –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É.

üìã –ú—ã –ø–æ–º–æ–∂–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω –∏ –≤–∞–∫–∞–Ω—Å–∏—é, –∞ —Ç–∞–∫–∂–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏–µ.

–ü—Ä–∏–º–µ—Ä—ã –≤–∞–∫–∞–Ω—Å–∏–π:
- –°—Ç—Ä–µ–ª–æ–∫-–ø—É–ª–µ–º—ë—Ç—á–∏–∫
- –í–æ–¥–∏—Ç–µ–ª—å –ë–¢–†
- –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
- –°–≤—è–∑–∏—Å—Ç

–ù–∞–∂–º–∏—Ç–µ ¬´üìã –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å¬ª, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É.
"""

# –†–µ–≥–∏–æ–Ω—ã
REGIONS = [
    "–ú–æ—Å–∫–≤–∞ ‚Äî –≥. –ú–æ—Å–∫–≤–∞ –ø–æ —É—Å–ª–æ–≤–∏—è–º 2,3 –º–ª–Ω —Ä—É–±–ª–µ–π –≤—ã–ø–ª–∞—Ç–∞, 290 —Ç—ã—Å —Ä—É–± –∑–∞—Ä–ø–ª–∞—Ç–∞ + 50 —Ç—ã—Å —Ä—É–± –Ω–∞–¥–±–∞–≤–∫–∞...",
    "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å ‚Äî 3 –º–ª–Ω —Ä—É–±–ª–µ–π –≤—ã–ø–ª–∞—Ç–∞, 290 —Ç—ã—Å —Ä—É–± –∑–∞—Ä–ø–ª–∞—Ç–∞ + 20 —Ç—ã—Å –Ω–∞–¥–±–∞–≤–∫–∞ –∑–∞ –¥–µ—Ç–µ–π...",
    "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å ‚Äî 2,4 –º–ª–Ω —Ä—É–±–ª–µ–π –≤—ã–ø–ª–∞—Ç–∞, 290 —Ç—ã—Å —Ä—É–± –∑–∞—Ä–ø–ª–∞—Ç–∞ + 20 —Ç—ã—Å —Ä—É–± –Ω–∞–¥–±–∞–≤–∫–∞ –∑–∞ —Ä–µ–±–µ–Ω–∫–∞...",
    "–†—è–∑–∞–Ω—å ‚Äî 1,5 –º–ª–Ω —Ä—É–±–ª–µ–π –≤—ã–ø–ª–∞—Ç–∞, 290 —Ç—ã—Å —Ä—É–± –∑–∞—Ä–ø–ª–∞—Ç–∞ + 20 —Ç—ã—Å —Ä—É–± –Ω–∞–¥–±–∞–≤–∫–∞ –∑–∞ —Ä–µ–±–µ–Ω–∫–∞...",
    "–í–æ–ª–æ–≥–¥–∞ ‚Äî 1,2 –º–ª–Ω —Ä—É–±–ª–µ–π –≤—ã–ø–ª–∞—Ç–∞, 290 —Ç—ã—Å —Ä—É–± –∑–∞—Ä–ø–ª–∞—Ç–∞ + 20 —Ç—ã—Å —Ä—É–± –Ω–∞–¥–±–∞–≤–∫–∞ –∑–∞ —Ä–µ–±–µ–Ω–∫–∞...",
    "–°–º–æ–ª–µ–Ω—Å–∫ ‚Äî 1,2 –º–ª–Ω —Ä—É–±–ª–µ–π –≤—ã–ø–ª–∞—Ç–∞, 290 —Ç—ã—Å —Ä—É–± –∑–∞—Ä–ø–ª–∞—Ç–∞ + 20 —Ç—ã—Å —Ä—É–± –Ω–∞–¥–±–∞–≤–∫–∞ –∑–∞ —Ä–µ–±–µ–Ω–∫–∞...",
]

# –í–∞–∫–∞–Ω—Å–∏–∏
VACANCIES_EXAMPLES = [
    "–°—Ç—Ä–µ–ª–æ–∫-–ø—É–ª–µ–º—ë—Ç—á–∏–∫",
    "–í–æ–¥–∏—Ç–µ–ª—å –ë–¢–† –∏ –¥—Ä. —Ç–µ—Ö–Ω–∏–∫–∏ (–ø–æ –í–£–°)",
    "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (–ø–æ –í–£–°)",
    "–°–≤—è–∑–∏—Å—Ç (–ø–æ –í–£–°)",
    "–û—Ö—Ä–∞–Ω–∞ –æ–±—ä–µ–∫—Ç–æ–≤",
    "–†–µ–º–ë–∞—Ç (–ø–æ –í–£–°)",
    "–ë–ø–ª–∞ (–ø–æ –í–£–°)",
    "–°–≤–∞—Ä—â–∏–∫ (–ø–æ –í–£–°)",
    "–î–∏–∑–µ–ª–∏—Å—Ç (–ø–æ –í–£–°)",
    "–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ (–ø–æ –í–£–°)",
]

DATA_DIR = "data"
CSV_FILE = os.path.join(DATA_DIR, "submissions.csv")
XLSX_FILE = os.path.join(DATA_DIR, "submissions.xlsx")

# ========= –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ==========
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

os.makedirs(DATA_DIR, exist_ok=True)

# ========= –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ==========
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# ========= –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ==========
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å"), KeyboardButton(text="üìç –£—Å–ª–æ–≤–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")],
        [KeyboardButton(text="‚ÑπÔ∏è –û—Ç–Ω–æ—à–µ–Ω–∏–µ / –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), KeyboardButton(text="üìÇ –ü—Ä–∏–º–µ—Ä—ã –≤–∞–∫–∞–Ω—Å–∏–π")]
    ],
    resize_keyboard=True
)

# ========= FSM ==========
class Form(StatesGroup):
    fio = State()
    phone = State()
    health = State()
    service = State()
    age = State()
    rights = State()
    education = State()
    experience = State()
    position = State()

# ========= –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ==========
def save_submission_to_files(submission: dict):
    df_new = pd.DataFrame([submission])
    if not os.path.exists(CSV_FILE):
        df_new.to_csv(CSV_FILE, index=False, encoding="utf-8-sig")
    else:
        df_existing = pd.read_csv(CSV_FILE, encoding="utf-8-sig")
        df_total = pd.concat([df_existing, df_new], ignore_index=True)
        df_total.to_csv(CSV_FILE, index=False, encoding="utf-8-sig")
    df_total.to_excel(XLSX_FILE, index=False)

# ========= –ö–æ–º–∞–Ω–¥—ã ==========
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(WELCOME_TEXT, reply_markup=main_menu)

@dp.message(lambda m: m.text == "üìç –£—Å–ª–æ–≤–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
async def show_regions(message: types.Message):
    text = "üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã:\n\n" + "\n".join([f"‚Ä¢ {r}" for r in REGIONS])
    await message.answer(text)

@dp.message(lambda m: m.text == "‚ÑπÔ∏è –û—Ç–Ω–æ—à–µ–Ω–∏–µ / –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def info_relation(message: types.Message):
    text = (
        "üìÑ –ú—ã –æ—Ñ–æ—Ä–º–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ, –ø–æ–º–æ–≥–∞–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –∏ —Ä–µ–≥–∏–æ–Ω, "
        "–∞ —Ç–∞–∫–∂–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
    )
    await message.answer(text)

@dp.message(lambda m: m.text == "üìÇ –ü—Ä–∏–º–µ—Ä—ã –≤–∞–∫–∞–Ω—Å–∏–π")
async def show_vacancies(message: types.Message):
    text = "üìå –ü—Ä–∏–º–µ—Ä—ã –≤–∞–∫–∞–Ω—Å–∏–π:\n\n" + "\n".join([f"‚Ä¢ {v}" for v in VACANCIES_EXAMPLES])
    await message.answer(text)

@dp.message(lambda m: m.text == "üìã –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å")
async def start_survey(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:")
    await state.set_state(Form.fio)

# === –í–æ–ø—Ä–æ—Å—ã —Ñ–æ—Ä–º—ã ===
@dp.message(Form.fio)
async def process_fio(message: types.Message, state: FSMContext):
    await state.update_data(fio=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
    await state.set_state(Form.phone)

@dp.message(Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–ï—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º?")
    await state.set_state(Form.health)

@dp.message(Form.health)
async def process_health(message: types.Message, state: FSMContext):
    await state.update_data(health=message.text)
    await message.answer("–ë—ã–ª–∏ –ª–∏ –≤—ã –Ω–∞ –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ / –°–í–û? –ï—Å–ª–∏ –¥–∞ ‚Äî –í–£–° –∏ –æ–ø—ã—Ç:")
    await state.set_state(Form.service)

@dp.message(Form.service)
async def process_service(message: types.Message, state: FSMContext):
    await state.update_data(service=message.text)
    await message.answer("–í–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(Form.age)

@dp.message(Form.age)
async def process_age(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∞–≤:")
    await state.set_state(Form.rights)

@dp.message(Form.rights)
async def process_rights(message: types.Message, state: FSMContext):
    await state.update_data(rights=message.text)
    await message.answer("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ / —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:")
    await state.set_state(Form.education)

@dp.message(Form.education)
async def process_education(message: types.Message, state: FSMContext):
    await state.update_data(education=message.text)
    await message.answer("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç / –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:")
    await state.set_state(Form.experience)

@dp.message(Form.experience)
async def process_experience(message: types.Message, state: FSMContext):
    await state.update_data(experience=message.text)
    await message.answer("–ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è:")
    await state.set_state(Form.position)

@dp.message(Form.position)
async def process_position(message: types.Message, state: FSMContext):
    await state.update_data(position=message.text)
    data = await state.get_data()

    submission = {
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        **data
    }
    save_submission_to_files(submission)

    admin_text = (
        "üìã <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"
        f"üë§ <b>–§–ò–û:</b> {data['fio']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}\n"
        f"üíä <b>–ó–¥–æ—Ä–æ–≤—å–µ:</b> {data['health']}\n"
        f"üéñÔ∏è <b>–°–ª—É–∂–±–∞:</b> {data['service']}\n"
        f"üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {data['age']}\n"
        f"üöó <b>–ü—Ä–∞–≤–∞:</b> {data['rights']}\n"
        f"üéì <b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b> {data['education']}\n"
        f"üíº <b>–û–ø—ã—Ç:</b> {data['experience']}\n"
        f"üìå <b>–í–∞–∫–∞–Ω—Å–∏—è:</b> {data['position']}\n"
    )

    try:
        await bot.send_message(ADMIN_CHAT_ID, admin_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É: {e}")

    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu)
    await state.clear()

# ========= –ö–æ–º–∞–Ω–¥–∞ /admin ==========
@dp.message(Command("admin"))
async def admin_command(message: types.Message):
    """–ü—Ä–æ—Å—Ç–∞—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è Excel"""
    
    if message.from_user.id != OWNER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º.")
        return

    csv_exists = os.path.exists(CSV_FILE)
    xlsx_exists = os.path.exists(XLSX_FILE)

    submissions_count = 0
    last_time = "‚Äî"
    if csv_exists:
        try:
            df = pd.read_csv(CSV_FILE)
            submissions_count = len(df)
            if submissions_count > 0 and "timestamp" in df.columns:
                last_time = df["timestamp"].iloc[-1]
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV: %s", e)

    text = (
        "‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: <b>{submissions_count}</b>\n"
        f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞: <b>{last_time}</b>\n"
        f"üìÇ CSV —Ñ–∞–π–ª: <code>{CSV_FILE}</code>\n"
        f"üìò Excel —Ñ–∞–π–ª: <code>{XLSX_FILE}</code>\n"
    )

    await message.answer(text, parse_mode="HTML")

    if xlsx_exists:
        try:
            file = FSInputFile(XLSX_FILE)
            await bot.send_document(OWNER_ID, file, caption="üìé –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏ (Excel)")
        except Exception as e:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Excel —Ñ–∞–π–ª: %s", e)

# ========= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ==========
@dp.message()
async def default_handler(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.", reply_markup=main_menu)

# ========= –ó–∞–ø—É—Å–∫ ==========
if __name__ == "__main__":
    import asyncio
    logger.info("Bot started")
    asyncio.run(dp.start_polling(bot))

